// Mocks generated by Mockito 5.4.4 from annotations
// in drift_tracker/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:drift_tracker/src/core/services/sensor_service.dart' as _i4;
import 'package:geolocator/geolocator.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sensors_plus/sensors_plus.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccelerometerEvent].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccelerometerEvent extends _i1.Mock
    implements _i2.AccelerometerEvent {
  MockAccelerometerEvent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get x => (super.noSuchMethod(
        Invocation.getter(#x),
        returnValue: 0.0,
      ) as double);

  @override
  double get y => (super.noSuchMethod(
        Invocation.getter(#y),
        returnValue: 0.0,
      ) as double);

  @override
  double get z => (super.noSuchMethod(
        Invocation.getter(#z),
        returnValue: 0.0,
      ) as double);
}

/// A class which mocks [GyroscopeEvent].
///
/// See the documentation for Mockito's code generation for more information.
class MockGyroscopeEvent extends _i1.Mock implements _i2.GyroscopeEvent {
  MockGyroscopeEvent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get x => (super.noSuchMethod(
        Invocation.getter(#x),
        returnValue: 0.0,
      ) as double);

  @override
  double get y => (super.noSuchMethod(
        Invocation.getter(#y),
        returnValue: 0.0,
      ) as double);

  @override
  double get z => (super.noSuchMethod(
        Invocation.getter(#z),
        returnValue: 0.0,
      ) as double);
}

/// A class which mocks [Position].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockPosition extends _i1.Mock implements _i3.Position {
  MockPosition() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get latitude => (super.noSuchMethod(
        Invocation.getter(#latitude),
        returnValue: 0.0,
      ) as double);

  @override
  double get longitude => (super.noSuchMethod(
        Invocation.getter(#longitude),
        returnValue: 0.0,
      ) as double);

  @override
  DateTime get timestamp => (super.noSuchMethod(
        Invocation.getter(#timestamp),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#timestamp),
        ),
      ) as DateTime);

  @override
  double get altitude => (super.noSuchMethod(
        Invocation.getter(#altitude),
        returnValue: 0.0,
      ) as double);

  @override
  double get altitudeAccuracy => (super.noSuchMethod(
        Invocation.getter(#altitudeAccuracy),
        returnValue: 0.0,
      ) as double);

  @override
  double get accuracy => (super.noSuchMethod(
        Invocation.getter(#accuracy),
        returnValue: 0.0,
      ) as double);

  @override
  double get heading => (super.noSuchMethod(
        Invocation.getter(#heading),
        returnValue: 0.0,
      ) as double);

  @override
  double get headingAccuracy => (super.noSuchMethod(
        Invocation.getter(#headingAccuracy),
        returnValue: 0.0,
      ) as double);

  @override
  double get speed => (super.noSuchMethod(
        Invocation.getter(#speed),
        returnValue: 0.0,
      ) as double);

  @override
  double get speedAccuracy => (super.noSuchMethod(
        Invocation.getter(#speedAccuracy),
        returnValue: 0.0,
      ) as double);

  @override
  bool get isMocked => (super.noSuchMethod(
        Invocation.getter(#isMocked),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [SensorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSensorService extends _i1.Mock implements _i4.SensorService {
  MockSensorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i2.AccelerometerEvent> getAccelerometerEvents() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccelerometerEvents,
          [],
        ),
        returnValue: _i5.Stream<_i2.AccelerometerEvent>.empty(),
      ) as _i5.Stream<_i2.AccelerometerEvent>);

  @override
  _i5.Stream<_i2.GyroscopeEvent> getGyroscopeEvents() => (super.noSuchMethod(
        Invocation.method(
          #getGyroscopeEvents,
          [],
        ),
        returnValue: _i5.Stream<_i2.GyroscopeEvent>.empty(),
      ) as _i5.Stream<_i2.GyroscopeEvent>);

  @override
  _i5.Stream<_i3.Position> getPositionStream() => (super.noSuchMethod(
        Invocation.method(
          #getPositionStream,
          [],
        ),
        returnValue: _i5.Stream<_i3.Position>.empty(),
      ) as _i5.Stream<_i3.Position>);
}
